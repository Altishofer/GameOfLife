{"diagram":"ClassDiagram","nodes":[{"methods":"+ cellHasColor(int, int, ColorType): boolean\n+ mirrorCell(int, int, ColorType, ColorType): void\n+ createNextGeneration(): void\n- makeGridsSame(): void\n+ killACell(int, int): void\n+ countNeighbors(int, int): ColorType\n- getDominantColor(int, int): ColorType\n- initGrids(): void\n+ revive(int, int, ColorType): void\n+ isAlive(int, int): boolean\n+ getCellCount(ColorType): int\n+ getColor(int, int): ColorType","name":"Grid","x":10,"y":10,"attributes":"- aDimension: int {read only}\n- aGrid: Cell[][] {read only}\n- aNextGrid: Cell[][] {read only}","id":0,"type":"ClassNode"},{"methods":"","name":"Kill","x":1040,"y":960,"attributes":"+ aGame: Game","id":1,"type":"ClassNode"},{"methods":"","name":"Initialization","x":820,"y":890,"attributes":"- aClickCount: int\n+ aGame: Game\n- aMaxInitialization: int {read only}","id":2,"type":"ClassNode"},{"methods":"+ toString(): String\n+ toColor(): Color","name":"<<ENUM>>\nColorType","x":300,"y":280,"attributes":"+ aR: int {read only}\n+ aB: int {read only}\n+ aG: int {read only}","id":3,"type":"ClassNode"},{"methods":"+ getButton(int, Color): JButton {read only}\n+ getSplitPaneVertical(int, int, int, JSplitPane, JSplitPane): JSPlitPane {read only}\n+ getSplitPaneHorizontal(int, int, int, JButton, JButton): JSplitPane {read only}\n- getSplitPaneHorizontal(int, int, int): JSplitPane {read only}\n+ getSplitPaneVertical(int, int, int, JPanel, JPanel): JSplitPane {read only}\n- getSplitPaneVertical(int, int, int): JSplitPane {read only}\n+ getSplitPaneHorizontal(int, int, int, JTextField, JButton): JSplitPane {read only}\n+ getSplitPaneVertical(int, int, int, JTextField, JSplitPane): JSplitPane {read only}\n+ getSplitPaneVertical(int, int, int, JSplitPane, JPanel): JSplitPane {read only}\n+ getSplitPaneHorizontal(int, int, int, JSplitPane, JSplitPane): JSplitPane {read only}","name":"GuiUtils","x":1250,"y":270,"attributes":"","id":4,"type":"ClassNode"},{"methods":"+ reviveACell(int, int, ColorType): null\n+ initOver(): boolean\n+ evolute(): void\n+ mirrorCell(int, int, ColorType, ColorType): void\n+ switchCurrentPlayer(): void\n+ getEvolutionCount: int\n+ killACell(int, int): void\n+ getKill(): GameState\n+ getRevive(): GameState\n+ setState(GameState): void\n+ setMessage(String): void","name":"Game","x":240,"y":650,"attributes":"- aInitialisation: GameState {read only}\n- aKill: GameState {read only}\n- aRevive: GameState {read only}\n- aGrid: Grid {read only}\n- aGameState: GameState\n- aGUI: SingletonGUI\n- aEvolutionCount: int","id":12,"type":"ClassNode"},{"methods":"","name":"Revive","x":670,"y":870,"attributes":"+ aGame: Game","id":5,"type":"ClassNode"},{"methods":"# paintComponent(Graphics): void","name":"TextFieldWithPrompt","x":1250,"y":510,"attributes":"","id":6,"type":"ClassNode"},{"methods":"- showGrid(): void\n- gameLogic(int[]): void\n- checkIfLost(): void\n- action(ColorType, ColorType, ColorType, ColorType, ColorType, ColorType): null\n- disableAll(): void\n+ switchCurrentPlayer(): void\n- disableAllFinished(): void\n- someoneHasLost(): boolean\n- getJpanel(String): JPanel\n- getButtonRowCol(JButton): int[]\n- getButton(int, ActionListener): JButton\n+ getCurrentPlayerName(): String\n- getBoard(): JPanel\n+ getInstance(): SingletonGUI {static, synchronized}\n- getOtherPlayerColor(): ColorType\n- setStats(): void\n","name":"SingletonGUI","x":720,"y":10,"attributes":"+ INSTANCE: SingletonGUI {static}\n- aSize: int\n- aIconSize: int {read only}\n- aButtonArray: JButton[][]\n- aCurrentPlayer: Player\n- aTextField1: TextFieldWithPrompt\n- aTextField2: TextFieldWithPrompt\n- aTextField3: TextFieldWithPrompt\n- aConfirmButton: JButton\n- aRedButton1: JButton\n- aRedButton2: JButton\n- aBlueButton1: JButton\n- aBlueButton2: JButton\n- aPlayer1: Player\n- aPlayer2: Player\n- aSplitPaneChartBoard: JSplitPane\n- aChartLabelP1: JLabel {read only}\n- aChartLabelP2: JLabel {read only}\n- aChartLabelMessage: JLabel {read only}\n- aChart: JPanel {read only}\n- aMessages: JPanel {read only}\n- aGameContainer: JPanel\n- aGame: Game\n- aGrid: Grid","id":7,"type":"ClassNode"},{"methods":"+ hashCode(): int\n+ compareTo(Object): int\n+ getPlayerName(): String\n+ getPlayerColor(): ColorString\n+ setPlayerName(String): void\n+ setPlayerColor(ColorString): void","name":"Player","x":460,"y":430,"attributes":"- aPlayerName: String\n- aPlayerColor: ColorType","id":13,"type":"ClassNode"},{"methods":"","name":"InputUtils","x":1250,"y":190,"attributes":"+ cleanUpString(String): String","id":8,"type":"ClassNode"},{"methods":"+ clickedemptyCell(int, int, ColorType, ColorType): void\n+ initOver(): boolean\n+ clickedExistingCell(int, int, ColorType): void\n+ getStateRule(): String","name":"GameState","x":770,"y":740,"attributes":"","id":9,"type":"ClassNode"},{"methods":"+ passData(Cell): void\n+ revive(ColorType): void\n+ kill(): void\n+ getColor(): ColorType\n+ isAlive(): boolean","name":"Cell","x":70,"y":430,"attributes":"- aIsAlive: boolean\n- aColor: ColorType","id":10,"type":"ClassNode"},{"name":"\"Revive\", \"Initialization\" and \"Kill\" also depend on \"Game\" and \"Game\" also depends on SingletonGUI, but we couldn't use multiple dependency arrows (or two-directional ones) in JetUML. ","x":220,"y":1050,"id":11,"type":"NoteNode"}],"edges":[{"middleLabel":"","start":7,"directionality":"Unidirectional","end":0,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":10,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":3,"type":"DependencyEdge"},{"middleLabel":"","start":10,"directionality":"Unidirectional","end":3,"type":"DependencyEdge"},{"middleLabel":"","start":0,"directionality":"Unidirectional","end":3,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":0,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":13,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":12,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":5,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":2,"type":"DependencyEdge"},{"middleLabel":"","start":12,"directionality":"Unidirectional","end":1,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":6,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":8,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":13,"type":"DependencyEdge"},{"Generalization Type":"Implementation","start":12,"end":9,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":5,"end":9,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":2,"end":9,"type":"GeneralizationEdge"},{"Generalization Type":"Implementation","start":1,"end":9,"type":"GeneralizationEdge"}],"version":"3.4"}
